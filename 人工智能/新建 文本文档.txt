

当我说出“基于数据库dbsystem中的person表生成对应的person对象”这句话后，智能程序能够

在这句话中提取以下的信息，
  1.首要关注点/关键字 是“数据库，表 ，对象”（这些词语是名词），
  2.其次是“基于”，“生成”（这两个词语是动词），
  3.然后是其他的一些限定信息如“数据库的名称，表名称，要生成的对象名称……”等等，

    详细的限定信息随着程序的知识库的增加而越加繁杂，比如，对于对象，更多的限定信息除了“对象名称”以外，还可以有“对象的作用域，对象的时效性……”等等，对于“数据库”，则有“数据库的类型（sql or oracle），数据库连接信息……”等等，

  详细限定信息可以有很多很多（规则库，规则集，这些都应该属于知识模型里面某个子集），程序首先从 明文中获取详细限定信息，其次从上下文环境中获取详细限定信息，然后再通过某些规则推导出信息（众多规则中包含一个“在某种情况下的默认值是什么”这个规则）


(题外话:智能程序的所有行为都不是固定的，而是能够灵活变通改变的，比如上面获取详细限定信息的方式也就不局限于本文介绍出的那几种方式与固定的顺序，我们允许智能程序在实际运行中能够通过“自省”这种方式来优化自己的信息提取模式。这个目标的实现涉及到了关于程序如何实现“自省”，在此不赘述)

【如何实现】

大家可以看到，为了能够让智能程序理解我说的一句简单的话，智能程序本身的实现是多么的复杂，因为它需要：
   1.有自然语言理解的能力（我们暂不说让它拥有理解错别字，歧义句的能力，目前就仅让它能够理解最简单严格的正确语义的句子。） ，为了理解自然语言，就会使用多种技术，包括关键的模式识别，语意层次模型建构，分词技术等，

   2.对相关问题域的知识模型的了解与建构能力。
      对相关问题域的知识模型的了解---关系到专家系统，知识表示等等。在本例子中则为 关于数据库方面的诸多知识，关于要生成的对应的东西的（面向对象领域中的对象概念）的知识模型。

      对相关问题域的知识模型的建构能力---关系到知识推导，启发。详细来说，就是如何在不知道应该怎么去解决问题的情况下尝试着找出问题的解决方式（当然，程序直接与人交流向人询问也是一种方式之一，其它的还有上网搜索等等，）而且，一旦成功解决了问题，则应该把解决此问题的经验保存起来以供下次遇到相同或类似的问题时能够灵活使用这个对应的经验/模式来解决同样问题。


【底层实现设计】



